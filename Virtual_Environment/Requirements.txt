# Using Virtual Environments
* To get started, if you’re not using Python 3, you’ll want to install the virtualenv tool with pip
>> $ pip install virtualenv

* If you are using Python 3, then you should already have the venv module from the standard library installed.
* Start by making a new directory to work with
>> $ mkdir python-virtual-environments
>> $ cd python-virtual-environments

# Create a new virtual environment inside the directory
>> $ virtualenv env  # for Python 2
>> $ python -m venv env # for Python 3

* The Python 3 venv approach has the benefit of forcing you to choose a specific version of the Python 3 interpreter that should be used to create the virtual environment. 
* This avoids any confusion as to which Python installation the new environment is based on.
* More interesting are the activate scripts in the bin directory. 
* These scripts are used to set up your shell to use the environment’s Python executable and its site-packages by default.

# Activating the Virtual Environment
* In order to use this environment’s packages/resources in isolation, you need to “activate” it. To do this, just run the following:
>> $ source env/Scripts/activate

# Deactivating the Virtual Environment
>> (env) $ deactivate
* Remember to do this whenever you’re done using a specific virtual environment.

# Is the Virtual Environment Working?
* First we check the list of packages installed in our virtual environment by running the code below in the activated virtual environment. 
* You will notice only two packages – pip and setuptools, which are the base packages that come default with a new virtual environment

>> $ pip list 

* Next you can run the same code above in a new terminal in which you have not activated the virtual environment. 
* You will notice a lot more libraries in your host Python that you may have installed in the past. 
* These libraries are not part of your Python virtual environment until you install them.

# How to Install Libraries in a Virtual Environment
* To install new libraries, you can easily just pip install the libraries. The virtual environment will make use of its own pip, so you will not need to use pip3.
* After installing your required libraries, you can view all installed libraries by using pip list
* or you can generate a text file listing all your project dependencies by running the code below:

>> $ pip freeze > requirements.txt # rename whatever you want

# Requirements File
>> $ ~ pip install -r requirements.txt 

* Note that it is generally not advisable to share your env folder, and it should be easily replicated in any new environment.
* Typically your env directory will be included in a .gitignore file (when using version control platforms like GitHub) to ensure that the environment file is not pushed to the project repository.
